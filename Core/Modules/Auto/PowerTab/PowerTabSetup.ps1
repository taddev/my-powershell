# PowerTabSetup.ps1
# 
# Does setup and Configure PowerTab PowerShell Tabcompletion extension
#  More info :
#    http://thepowershellguy.com/blogs/posh/pages/powertab.aspx
#    http://thepowershellguy.com/blogs/posh/archive/tags/PowerTab/default.aspx
# 
# /\/\o\/\/ 2007  
# http://ThePowerShellGuy.com

PARAM ($installDir = (pwd).path)

&{
  trap {write-warning $_;continue}
  $ws = $host.ui.RawUI.WindowSize
  $bs = $host.ui.RawUI.BufferSize
  $ms = $host.ui.RawUI.MaxPhysicalWindowSize
  $bs.Width = $ms.Width - 20
  $ws.Width = $ms.Width - 20
  if ($ws.Width -gt 120) {$bs.Width = 120;$ws.Width = 120}
  $ws.Height = $ms.Height - 5
  $host.ui.RawUI.BufferSize = $bs
  $host.ui.RawUI.WindowSize = $ws
  $host.ui.RawUI.BufferSize = $bs
}
  Write-Host -backgroundColor 'Red'(" " * 50)
  Write-Host -backgroundColor 'Yellow' -ForegroundColor 'Red' "    PowerTab 0.98 PowerShell TabExpansion Setup   "
  Write-Host -backgroundColor 'Red'(" " * 50)
  Write-Host -foregroundColor 'Yellow' "`nPress Enter to start the Powertab Setup `n"
  Write-Host "`nThis setup script can be used to do a clean install of Powertab or it can be used to update an existing PowerTab script library "
  Write-Host "`nthe Setup will configure powershell by : 
  1) Creating a default configuration and saving it to an XML file, 
  2) updating the PowerShell profile to add the code to start PowerTab when needed,
  3) create and fill or update the Tabexpansiondatabase when needed
  
  When you are upgrading PowerTab by default only the configuration is updated by setup (step one) the current profile and database will be preserved, if you do accept the default on all questions"
  Write-Host ""
  read-host "Press enter to Continue, Ctrl-C to Quit"
# check for needed files

  Write-Host -ForegroundColor 'Yellow' "Checking Instalation directory `n"
$Usage = "`nThe Scriptfiles must be in the Current directory or you must supply path to the Installation directory as parameter`nInstallation Stopped"

if ( -not (gi "$installDir\TabExpansionLib.ps1" -ea Silentlycontinue)) {write-warning "`nTabExpansionLib.ps1 not found in $installDir `n$Usage";exit}
if ( -not (gi "$installDir\TabExpansion.ps1" -ea Silentlycontinue)) {write-warning "`nTabExpansion.ps1 not found in $installDir `n$Usage";exit}
if ( -not (gi "$installDir\Out-DataGridView.ps1" -ea Silentlycontinue)) {write-warning "`nOut-DatagridView.ps1 not found in $installDir `n$Usage";exit}

  Write-Host "Installation directory : $installDir `n"
  Write-Host -ForegroundColor 'Green' "Passed : " -no
  Write-Host "Needed files available `n"

# check if Profile and ProfileDirectory do exist :

$ptProfileDir = Split-Path -parent $PROFILE


# unblock files if needed :

Write-Host -ForegroundColor 'Yellow' "Checking if Powertab script files are not blocked and unblock them when Needed :`n"

invoke-expression ([STRING]::JOIN("`n",(gc "$installDir\UnBlockAllScripts.txt" )))

Write-Host -ForegroundColor 'Yellow' "`nChecking for Profile availability and location :`n"

if ( -not (test-Path $ptProfileDir)) {
  Write-Host -ForegroundColor 'Yellow' "Profile Directory does not yet exist"
  Write-Host -ForegroundColor 'Yellow' "(It is not created in default installation of PowerShell)"
  Write-Host -ForegroundColor 'Yellow' "This directory is Needed for Creating of the Profile and saving of the Tabcompletion DataBase"
  New-Item -type directory -path $ptProfileDir -confirm | ft
}


if ( -not (test-Path $ptProfileDir)) {
  Write-Host -ForegroundColor 'Red' 'No Profile Directory !'
  Write-Host 'you can not create profile for Powertab !'
}else{
   Write-Host -ForegroundColor 'Green' "Passed : " -no
   Write-Host "Profile directory : $ptProfileDir `n"
}

if ( -not (test-Path $Profile)) {
  Write-Host -ForegroundColor 'Yellow' "No Profile exist Yet ... Create Default ?"
  Set-Content $profile "# Default PowerShell Profile`n# Generated by PowerTab TabCompletionSetup" -Confirm
}

if ( -not (test-Path $Profile)) {Write-Host -ForegroundColor 'Red' "No Profile created ($profile) "
}else{
   Write-Host -ForegroundColor 'Green' "Passed : " -no
   Write-Host "Profile available `n"
}

# Helpers for choices ToDo make Choice function

$Yes = ([System.Management.Automation.Host.ChoiceDescription]"&Yes")
$No = ([System.Management.Automation.Host.ChoiceDescription]"&No")
$choices = [System.Management.Automation.Host.ChoiceDescription[]]($no,$Yes)

# Set configuration location



$Prof = ([System.Management.Automation.Host.ChoiceDescription]"&Profile Directory")
$Install = ([System.Management.Automation.Host.ChoiceDescription]"&Installation Directory")
$Other = ([System.Management.Automation.Host.ChoiceDescription]"&Other")
$profileChoices = [System.Management.Automation.Host.ChoiceDescription[]]($Prof,$Install,$Other)

Write-Host -ForegroundColor 'Yellow' "`nPowertab Configuration :`n"
  Write-Host "The configuration of Powertab is saved in a XML file called PowerTabConfig.xml `n"
  Write-Host "To be able to permanently change configuration settings the user needs to have read/write access to this file"
  Write-Host "The default location for the configuration database is in the Profile directory 'P' , you can also choose 'I' for the installation directory or 'O' for an other Location to store the Powertab Configuration database now,"
  Write-Host "Watch out !, when changing this setting after the installation you need to change the location in the profile PowerTab startup code also"

  Write-Host -ForegroundColor 'Yellow' "`nPick Powertab Configuration Location"
$Done = $false
while (-not $done){
  $Answer = $host.ui.PromptForChoice('Pick location to store the Powertab Configuration database',"or choose Other to provide custom location manual",$profileChoices,0)
  Switch ($answer) {
    0 {$Path = $ptProfileDir;$Done = $True}
    1 {$Path = $installDir;$Done = $True}
    2 {
        $path = read-host 'enter directory path for storing PowertabConfiguration.xml'
        if (-not (Test-Path -IsValid $path)){write-Host 'Red' 'Path is invalid';continue}
        if (-not (Test-Path  $path)){write-Host 'Yellow' '{Path does not exist do you want to create it ?'
          New-Item -ItemType 'd' -Path $Path -confirm | ft
          if (-not (Test-Path  $path)) {write-Host 'Red' 'Configuration Path not set !';continue}
          $Done = $True
        }
      }
   }
}

$PowerTabConfigurationLocation = ( resolve-path $Path ).ProviderPath
write-host "Selected configuration path : $PowerTabConfigurationLocation"

. "$installDir\TabExpansionLib.ps1"

if (-not (Test-Path  "$PowerTabConfigurationLocation\PowerTabConfig.xml")) {

  write-host -f 'yellow' "`nCreating new configuration"
}else{
  write-host -f 'yellow' "`nExisting configuration file found" 
  Import-TabExpansionConfig 'PowerTabConfig.xml' $PowerTabConfigurationLocation -no
  write-host ("Version : " + $dsTabExpansion.Tables['config'].select("Name = 'Version'")[0].value)
  write-host "`nThe configuration database will be upgraded and all configuration wil be reset to there default value by this action, this goes only for the configuration not for the rest of the Tabexpansion database" 
  read-host "Press enter to overwrite, Ctrl-C to Quit"
}
&"$installDir\New-TabExpansionConfig.ps1" $installDir $PowerTabConfigurationLocation -no
Import-TabExpansionConfig 'PowerTabConfig.xml' $PowerTabConfigurationLocation -no

Write-Host -ForegroundColor 'Yellow' "`nPowerTab Setup Configuration :`n"
write-host "The TabExpansion database will be placed in same directory as profile but this database can be freely moved and renamed after installation"
write-host  "Watch out if you change installation or configuration directory after installation you need to change initialisation code in profile also !" 

$dsTabExpansion.Tables['config'].select("Category = 'Setup'") | ft name,value -a

Write-Host -ForegroundColor 'Yellow' "`nPowerTab Initialisation Code`n"
Write-Host "For powertab to initalize when a new shell session is started it needs to add some code to the PowerShell profile `n"

$ProfileText = @"

################ Start of PowerTab Initialisatie Code ########################
#
#  added to Profile by PowerTab Setup For Loading of Custom TabExpansion,
#
# /\/\o\/\/ 2007
#
# http://ThePowerShellGuy.com
#


# Initialize PowerTab 

& '$installDir\Init-TabExpansion.ps1' ``
     -ConfigurationLocation '$PowerTabConfigurationLocation' 



################ End of PowerTab Initialisatie Code ##########################

"@

Write-Host -ForegroundColor 'Yellow' 'Add the following Code to your Profile For loading tabCompletion at startup ?`n'
Write-Host $profileText
Write-Host -ForegroundColor 'Yellow' 'If you choose No you need to run Init-TabExpansion.PS1 <Path where Powertabconfig.xml can be found> yourself every new session to load PowerTab'
$SKip = $false
if (Get-Content $PROFILE | Select-String 'Start of PowerTab') {''
  Write-Host -ForegroundColor 'Red' 'Watch out ! existing PowerTab configuration found in profile !' 
  Write-Host "PowerTab startup code only needs to be added once, only needed for first installations or when this code was not added to profile before !"
  Write-Host "`nIf you are upgrading from a version later as Powertab 0.95 no profile changes will be needed when upgrading , you can skip this part of setup and just leave the code in the profile 'as is' ! "
  write-host "when Upgrading from an older version of powertab note that the installer will only append new PowerTab configuration to Profile, it will not remove old information from Profile, you need to clean up old configuration from former version manualy"
Write-Host -ForegroundColor 'Yellow' "do you want to skip the update of the Profile ?"
$Answer = $host.ui.PromptForChoice('Skip Profile update ?',"if you pick No you can update profile anyway",$choices,(1))
if ($answer) {$skip = $true }
}
if (-not $Skip) {Add-Content $PROFILE $ProfileText -Confirm}


# First Setup of DataBase :

Write-Host -ForegroundColor 'Yellow' "`nTabexansion Database :`n"
Write-Host 'Create or Update Tabcompletion DataBase '
Write-Host "the TabCompletion database is used to store Type, WMI and Custom expansion information" 
Write-Host "This information is used and needed for a lot of the extra functionality added by powertab" 

$DatabaseName = $global:dsTabExpansion.tables['Config'].select("Name = 'DatabaseName'")[0].value
$DatabasePath = $global:dsTabExpansion.tables['Config'].select("Name = 'DatabasePath'")[0].value

Write-Host "This database by default will be saved as : $DatabaseName"
Write-Host "In directory : $DatabasePath"

$newDataBase = $false

$mem = $false
if ($dsTabExpansion.Tables['Custom']) {
  Write-Host -ForegroundColor 'Yellow' "`nexisting Powertab database found in memory !" 
  Write-Host "this database will be upgraded if you do not generate a new database or load the existing one" 
  $mem = $host.ui.PromptForChoice('Use currently loaded Tabcompletion Database',"Upgrade existing TabcompletionDatabase in memory ?",$choices,1)
}


if ( test-path "$DatabasePath\$DatabaseName" ) {
  Write-Host -fore 'yellow' "`nDatabase with same name and location found, if you choose Yes at the end of setup it will be overwritten"
  write-host "To save the new database with another name or in an other location  "
  write-host "when you are upgrading from version 0.9x or higher  of Powertab generating a new database is most likely not needed  "
  Write-Host -ForegroundColor 'Yellow' 'Import this TabExpansion Database to update ?'
  $tdb = $host.ui.PromptForChoice('Import TabExpansion Database ?',"load this TabcompletionDatabase in memory to update ?",$choices,([int](-not $mem)))
  if ($tdb ){Import-TabExpansionDataBase $DatabaseName $DatabasePath;$mem = $true}
}

if (-not $mem) {
  $Answer = $host.ui.PromptForChoice('create new Tabcompletion Database ?',"Make new TabcompletionDatabase (in memory, will not override the saved database) ?",$choices,1)
}else{$answer = $false}
if ($answer) {
  New-TabExpansionDataBase $DatabaseName $DatabasePath
  Import-TabExpansionConfig 'PowerTabConfig.xml' $PowerTabConfigurationLocation -no
  $newDataBase = $True
}

if (-not $dsTabExpansion) {
  write-warning "No tabexpansion Database !, can't continue setup !";return
}

Write-Host -ForegroundColor 'Yellow' "`nFilling or updating the Powertab Tabexpansion database"
Write-Host "Retrieve the data needed for Powertab from the different sources and fill or update the Tabexpansion database with it" 

Write-Host -ForegroundColor 'Yellow' "`n.NET Types"
Write-Host "The Type information of the loaded .NET namespaces will be enumerated and added to the Database" 
$Answer = $host.ui.PromptForChoice('Load .NET types',"Load Types into TabcompletionDatabase ?",$choices,([int]$newDataBase))
if ($answer) {Update-TabExpansionTypes }

Write-Host -ForegroundColor 'Yellow' "`nWMI CLasses"
Write-Host "The WMI classes will be enumerated and information about them added to the Database" 
$Answer = $host.ui.PromptForChoice('Load WMI Classes',"Load WMI Classes into TabcompletionDatabase ?",$choices,([int]$newDataBase))
if ($answer) {Update-TabExpansionWmi}

Write-Host -ForegroundColor 'Yellow' "`nCustom tabexpansion additions"
Write-Host "The included TabExpansionCustomLib contains some handy additions for the Custom Tabcompletion Library" 
$Answer = $host.ui.PromptForChoice('Load  Custom Library ?',"Load predefined custom completion samples from TabExpansionCustomLib.ps1 into TabcompletionDatabase ?",$choices,([int]$newDataBase))
if ($answer) {
  . "$installDir\TabExpansionCustomLib.ps1"
}

Write-Host -ForegroundColor 'Yellow' "`nUse get-tabcompletion -type custom to list Current Custom Aliases :"
# $dsTabExpansion.Tables['Custom'].select("type = 'Custom'") | format-table

Write-Host -ForegroundColor 'Yellow' 'Save the DataBase ? (will completly overwrite existing one !, to save with different name you can choose No here and use export-tabexpansion with the -filename switch)'
Write-Host -ForegroundColor 'White' "`nNote that by default NO changes to the database are saved and changes made are lost when closing the session"
Write-Host -ForegroundColor 'White' "to make the changes permanent you need to save the Powertab database with Export-TabexpansionDatabase`n"
Write-Host -ForegroundColor 'White' "this goes also for configuration changes made with `$PowertabConfig to save only config chanes use export-TabExpansionConfig helper function`n"
$Answer = $host.ui.PromptForChoice('Export Tabcompletion ?',"Save the new or updated Tabcompletion database ?",$choices,([int]$newDataBase))
if ($answer) {Export-TabExpansionDatabase $DatabaseName $DatabasePath}

Write-Host -ForegroundColor 'Yellow' 'Setup Completed :'
Write-Host -ForegroundColor 'Yellow'  "`nDon't forget to export the database or configuration when you want changes you make to them to be permanent"
Write-Host 'The following Utility functions are provided for PowerTab :'
Write-Host -ForegroundColor 'Yellow' "`nPowerTab Utility functions :"
Get-Command *-tabExpansion* | ft Name | out-string

Read-Host 'Press Enter to finish setup and intitialize PowerTab'
& "$installDir\Init-TabExpansion.ps1" $PowerTabConfigurationLocation -NoWarn
Write-Host -ForegroundColor 'Yellow' "`nPowerTab Configuration :"
$PowerTabConfig | fl

# End of setup 

Write-Host -ForegroundColor 'Yellow' 'For more Information and examples about PowerTab Tabexpansions see :'
Write-Host -ForegroundColor 'white' 'The PowerTab PowerShell Tab Extension Overview Page'
Write-Host -ForegroundColor 'white' "http://thepowershellguy.com/blogs/posh/pages/powertab.aspx`n"
Write-Host -ForegroundColor 'green' 'Enjoy, Greetings /\/\o\/\/'
Write-Host -ForegroundColor 'white' 'http://ThePowerShellGuy.com'
# SIG # Begin signature block
# MIIY1AYJKoZIhvcNAQcCoIIYxTCCGMECAQExCzAJBgUrDgMCGgUAMGkGCisGAQQB
# gjcCAQSgWzBZMDQGCisGAQQBgjcCAR4wJgIDAQAABBAfzDtgWUsITrck0sYpfvNR
# AgEAAgEAAgEAAgEAAgEAMCEwCQYFKw4DAhoFAAQUE+sxxLGaEEP8s/F4QiC13tmW
# 1EegghSGMIIDejCCAmKgAwIBAgIQOCXX+vhhr570kOcmtdZa1TANBgkqhkiG9w0B
# AQUFADBTMQswCQYDVQQGEwJVUzEXMBUGA1UEChMOVmVyaVNpZ24sIEluYy4xKzAp
# BgNVBAMTIlZlcmlTaWduIFRpbWUgU3RhbXBpbmcgU2VydmljZXMgQ0EwHhcNMDcw
# NjE1MDAwMDAwWhcNMTIwNjE0MjM1OTU5WjBcMQswCQYDVQQGEwJVUzEXMBUGA1UE
# ChMOVmVyaVNpZ24sIEluYy4xNDAyBgNVBAMTK1ZlcmlTaWduIFRpbWUgU3RhbXBp
# bmcgU2VydmljZXMgU2lnbmVyIC0gRzIwgZ8wDQYJKoZIhvcNAQEBBQADgY0AMIGJ
# AoGBAMS18lIVvIiGYCkWSlsvS5Frh5HzNVRYNerRNl5iTVJRNHHCe2YdicjdKsRq
# CvY32Zh0kfaSrrC1dpbxqUpjRUcuawuSTksrjO5YSovUB+QaLPiCqljZzULzLcB1
# 3o2rx44dmmxMCJUe3tvvZ+FywknCnmA84eK+FqNjeGkUe60tAgMBAAGjgcQwgcEw
# NAYIKwYBBQUHAQEEKDAmMCQGCCsGAQUFBzABhhhodHRwOi8vb2NzcC52ZXJpc2ln
# bi5jb20wDAYDVR0TAQH/BAIwADAzBgNVHR8ELDAqMCigJqAkhiJodHRwOi8vY3Js
# LnZlcmlzaWduLmNvbS90c3MtY2EuY3JsMBYGA1UdJQEB/wQMMAoGCCsGAQUFBwMI
# MA4GA1UdDwEB/wQEAwIGwDAeBgNVHREEFzAVpBMwETEPMA0GA1UEAxMGVFNBMS0y
# MA0GCSqGSIb3DQEBBQUAA4IBAQBQxUvIJIDf5A0kwt4asaECoaaCLQyDFYE3CoIO
# LLBaF2G12AX+iNvxkZGzVhpApuuSvjg5sHU2dDqYT+Q3upmJypVCHbC5x6CNV+D6
# 1WQEQjVOAdEzohfITaonx/LhhkwCOE2DeMb8U+Dr4AaH3aSWnl4MmOKlvr+ChcNg
# 4d+tKNjHpUtk2scbW72sOQjVOCKhM4sviprrvAchP0RBCQe1ZRwkvEjTRIDroc/J
# ArQUz1THFqOAXPl5Pl1yfYgXnixDospTzn099io6uE+UAKVtCoNd+V5T9BizVw9w
# w/v1rZWgDhfexBaAYMkPK26GBPHr9Hgn0QXF7jRbXrlJMvIzMIIDxDCCAy2gAwIB
# AgIQR78Zld+NUkZD99ttSA0xpDANBgkqhkiG9w0BAQUFADCBizELMAkGA1UEBhMC
# WkExFTATBgNVBAgTDFdlc3Rlcm4gQ2FwZTEUMBIGA1UEBxMLRHVyYmFudmlsbGUx
# DzANBgNVBAoTBlRoYXd0ZTEdMBsGA1UECxMUVGhhd3RlIENlcnRpZmljYXRpb24x
# HzAdBgNVBAMTFlRoYXd0ZSBUaW1lc3RhbXBpbmcgQ0EwHhcNMDMxMjA0MDAwMDAw
# WhcNMTMxMjAzMjM1OTU5WjBTMQswCQYDVQQGEwJVUzEXMBUGA1UEChMOVmVyaVNp
# Z24sIEluYy4xKzApBgNVBAMTIlZlcmlTaWduIFRpbWUgU3RhbXBpbmcgU2Vydmlj
# ZXMgQ0EwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCpyrKkzM0grwp9
# iayHdfC0TvHfwQ+/Z2G9o2Qc2rv5yjOrhDCJWH6M22vdNp4Pv9HsePJ3pn5vPL+T
# rw26aPRslMq9Ui2rSD31ttVdXxsCn/ovax6k96OaphrIAuF/TFLjDmDsQBx+uQ3e
# P8e034e9X3pqMS4DmYETqEcgzjFzDVctzXg0M5USmRK53mgvqubjwoqMKsOLIYdm
# vYNYV291vzyqJoddyhAVPJ+E6lTBCm7E/sVK3bkHEZcifNs+J9EeeOyfMcnx5iIZ
# 28SzR0OaGl+gHpDkXvXufPF9q2IBj/VNC97QIlaolc2uiHau7roN8+RN2aD7aKCu
# FDuzh8G7AgMBAAGjgdswgdgwNAYIKwYBBQUHAQEEKDAmMCQGCCsGAQUFBzABhhho
# dHRwOi8vb2NzcC52ZXJpc2lnbi5jb20wEgYDVR0TAQH/BAgwBgEB/wIBADBBBgNV
# HR8EOjA4MDagNKAyhjBodHRwOi8vY3JsLnZlcmlzaWduLmNvbS9UaGF3dGVUaW1l
# c3RhbXBpbmdDQS5jcmwwEwYDVR0lBAwwCgYIKwYBBQUHAwgwDgYDVR0PAQH/BAQD
# AgEGMCQGA1UdEQQdMBukGTAXMRUwEwYDVQQDEwxUU0EyMDQ4LTEtNTMwDQYJKoZI
# hvcNAQEFBQADgYEASmv56ljCRBwxiXmZK5a/gqwB1hxMzbCKWG7fCCmjXsjKkxPn
# BFIN70cnLwA4sOTJk06a1CJiFfc/NyFPcDGA8Ys4h7Po6JcA/s9Vlk4k0qknTnqu
# t2FB8yrO58nZXt27K4U+tZ212eFX/760xX71zwye8Jf+K9M7UhsbOCf3P0owggZw
# MIIEWKADAgECAgEkMA0GCSqGSIb3DQEBBQUAMH0xCzAJBgNVBAYTAklMMRYwFAYD
# VQQKEw1TdGFydENvbSBMdGQuMSswKQYDVQQLEyJTZWN1cmUgRGlnaXRhbCBDZXJ0
# aWZpY2F0ZSBTaWduaW5nMSkwJwYDVQQDEyBTdGFydENvbSBDZXJ0aWZpY2F0aW9u
# IEF1dGhvcml0eTAeFw0wNzEwMjQyMjAxNDZaFw0xNzEwMjQyMjAxNDZaMIGMMQsw
# CQYDVQQGEwJJTDEWMBQGA1UEChMNU3RhcnRDb20gTHRkLjErMCkGA1UECxMiU2Vj
# dXJlIERpZ2l0YWwgQ2VydGlmaWNhdGUgU2lnbmluZzE4MDYGA1UEAxMvU3RhcnRD
# b20gQ2xhc3MgMiBQcmltYXJ5IEludGVybWVkaWF0ZSBPYmplY3QgQ0EwggEiMA0G
# CSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQDKI4siNR6aoBs8nUnQPwyXOBYpuvh9
# iVtFWO+EcO1+EU3pFDGrQ+NNDFGBbPAVA0okJ1Tl+0qgzk3hhKMh3pk1q9xJrr8x
# xWeEMBCb7wfcdagPTfQ1U7FuOAP8iHcdpXf/P3Xn2ee/LFARyRFl+kkHYp+Tpoep
# bcmdK9F75dVlK58NUJ7++3EZITAoJo2uwtz2luhShggLejLNahRNnrn5zQfilpHx
# zx4r+YL3XiYGjo3R1DnXb9uRJ1p5j1hpCka1b+H9b8WRtBFPewKm20tWUiOeS5ji
# v37O+qFOg+PFx8NgR/5cPxUaQCqV7wBryFD4zWoZ1CMDJ7w7NtW5Q7DvAgMBAAGj
# ggHpMIIB5TAPBgNVHRMBAf8EBTADAQH/MA4GA1UdDwEB/wQEAwIBBjAdBgNVHQ4E
# FgQU0E4PQJlsuEsZbzsouODjiAc0qrcwHwYDVR0jBBgwFoAUTgvvGqRAW6UXaYcw
# yjRoQ9BBrvIwPQYIKwYBBQUHAQEEMTAvMC0GCCsGAQUFBzAChiFodHRwOi8vd3d3
# LnN0YXJ0c3NsLmNvbS9zZnNjYS5jcnQwWwYDVR0fBFQwUjAnoCWgI4YhaHR0cDov
# L3d3dy5zdGFydHNzbC5jb20vc2ZzY2EuY3JsMCegJaAjhiFodHRwOi8vY3JsLnN0
# YXJ0c3NsLmNvbS9zZnNjYS5jcmwwgYAGA1UdIAR5MHcwdQYLKwYBBAGBtTcBAgEw
# ZjAuBggrBgEFBQcCARYiaHR0cDovL3d3dy5zdGFydHNzbC5jb20vcG9saWN5LnBk
# ZjA0BggrBgEFBQcCARYoaHR0cDovL3d3dy5zdGFydHNzbC5jb20vaW50ZXJtZWRp
# YXRlLnBkZjARBglghkgBhvhCAQEEBAMCAAEwUAYJYIZIAYb4QgENBEMWQVN0YXJ0
# Q29tIENsYXNzIDIgUHJpbWFyeSBJbnRlcm1lZGlhdGUgT2JqZWN0IFNpZ25pbmcg
# Q2VydGlmaWNhdGVzMA0GCSqGSIb3DQEBBQUAA4ICAQBycwsDdVo3g4gT2XhBPk4S
# 1nLk8HIGK3egeKpCmBURCjsMdGyNcPkf8jJOK+kyKRpp5HEi/3ltpF3iGhRwzAOP
# gkiMLdYD0Wg0VXfVIyWMRlrrobxFAQJ0xJK5+B8Ni7VdD5xQrGEPcS0sYZwUaOMw
# vsRC/YiiXvjWsSzJxfAhdyvLF6IxtTZM+Ltfd6VvBAxzgkWUngHL0WEHO5kHUNXa
# w3aKsZVsLcb/X5LZ2g8OMvUJoSXBFr9PSqSra+8/FSCvICgKmlQUpWLDnKgZgL7P
# UZp6xZaI/V4UoAvTAjsiBK8vNTfLVWnu+xhrE5UGpm15sVNZEe1eMKwWutAGeC3R
# 3fdBtBEjmbCDMSntcn3G7l3pFVYzhM9FSx34MNmkEeb2azO+L2BUVvZkbupFFcJK
# rKzj6780sE9teL+b+VTTRw4NBOUL967COT0dC1GtdD/OqwElLpQn54sbDWo5+P4d
# UGX9lCl+guTsihaVFC9EvWzuiKsRqo9lQhZj+Cter2vqMMoCnctl0pCk86eeiC2q
# VTh/v+QuMQmGutz3yas5aZUwr8G4VEB9DmgNQydWYLMDMsyMp8ZxVb+Ix7DjXJ+G
# ApvCl/ObcsGvVm/6kQGByBbqidEtICfdcczR423P4CTEfqtF/oHaZiEsQQYtqkfx
# HUAwCjgFtUU5lHmRdwwLCjCCBsgwggWwoAMCAQICAgIHMA0GCSqGSIb3DQEBBQUA
# MIGMMQswCQYDVQQGEwJJTDEWMBQGA1UEChMNU3RhcnRDb20gTHRkLjErMCkGA1UE
# CxMiU2VjdXJlIERpZ2l0YWwgQ2VydGlmaWNhdGUgU2lnbmluZzE4MDYGA1UEAxMv
# U3RhcnRDb20gQ2xhc3MgMiBQcmltYXJ5IEludGVybWVkaWF0ZSBPYmplY3QgQ0Ew
# HhcNMTAxMDIzMDAyMjU5WhcNMTIxMDI0MDcyNzEzWjCBxTEgMB4GA1UEDRMXMjgw
# NjI4LVA3TFV5Q0ZyUWs1dEgyV3kxCzAJBgNVBAYTAlVTMRUwEwYDVQQIEwxTb3V0
# aCBEYWtvdGExEzARBgNVBAcTClJhcGlkIENpdHkxLTArBgNVBAsTJFN0YXJ0Q29t
# IFZlcmlmaWVkIENlcnRpZmljYXRlIE1lbWJlcjEUMBIGA1UEAxMLVGFkIERlVnJp
# ZXMxIzAhBgkqhkiG9w0BCQEWFHRhZGRldnJpZXNAZ21haWwuY29tMIIBIjANBgkq
# hkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA6MJoHOBh3YnusPxodtJLsUFujkRUYojA
# v4zbVPIV5Tc/lHFYl4dHIFMyR6ML16ZcmKp1byhKbecj+nD6vtj8pOMdXSZW/YQs
# w92nyfaJbkV0DSqvQrecYDFBw010A3WvOIelgtCRQjxd9l/FGCpm5nIrV0AKJkKH
# DtIgR5LQ792XEkmPQXi85TPYRKlgdbSpA8+DTKKFH2PAcAYEUQSlDV0DyD5TL2Gs
# iK8FIBJSj0ZRfaBSMqZbiVAujtY7rgHU5DMleSRAT4zvIeE6F2+1x1S5MJnI23AD
# UQmHPPRnLgNKDXDvm/hcxnAnvY42OQDHnisrkO2wwUXdDHeavM6WFQIDAQABo4IC
# 9zCCAvMwCQYDVR0TBAIwADAOBgNVHQ8BAf8EBAMCB4AwOgYDVR0lAQH/BDAwLgYI
# KwYBBQUHAwMGCisGAQQBgjcCARUGCisGAQQBgjcCARYGCisGAQQBgjcKAw0wHQYD
# VR0OBBYEFEldJ6UCXfE7XFuqGd7n0QOVKUsNMB8GA1UdIwQYMBaAFNBOD0CZbLhL
# GW87KLjg44gHNKq3MIIBQgYDVR0gBIIBOTCCATUwggExBgsrBgEEAYG1NwECAjCC
# ASAwLgYIKwYBBQUHAgEWImh0dHA6Ly93d3cuc3RhcnRzc2wuY29tL3BvbGljeS5w
# ZGYwNAYIKwYBBQUHAgEWKGh0dHA6Ly93d3cuc3RhcnRzc2wuY29tL2ludGVybWVk
# aWF0ZS5wZGYwgbcGCCsGAQUFBwICMIGqMBQWDVN0YXJ0Q29tIEx0ZC4wAwIBARqB
# kUxpbWl0ZWQgTGlhYmlsaXR5LCBzZWUgc2VjdGlvbiAqTGVnYWwgTGltaXRhdGlv
# bnMqIG9mIHRoZSBTdGFydENvbSBDZXJ0aWZpY2F0aW9uIEF1dGhvcml0eSBQb2xp
# Y3kgYXZhaWxhYmxlIGF0IGh0dHA6Ly93d3cuc3RhcnRzc2wuY29tL3BvbGljeS5w
# ZGYwYwYDVR0fBFwwWjAroCmgJ4YlaHR0cDovL3d3dy5zdGFydHNzbC5jb20vY3J0
# YzItY3JsLmNybDAroCmgJ4YlaHR0cDovL2NybC5zdGFydHNzbC5jb20vY3J0YzIt
# Y3JsLmNybDCBiQYIKwYBBQUHAQEEfTB7MDcGCCsGAQUFBzABhitodHRwOi8vb2Nz
# cC5zdGFydHNzbC5jb20vc3ViL2NsYXNzMi9jb2RlL2NhMEAGCCsGAQUFBzAChjRo
# dHRwOi8vd3d3LnN0YXJ0c3NsLmNvbS9jZXJ0cy9zdWIuY2xhc3MyLmNvZGUuY2Eu
# Y3J0MCMGA1UdEgQcMBqGGGh0dHA6Ly93d3cuc3RhcnRzc2wuY29tLzANBgkqhkiG
# 9w0BAQUFAAOCAQEApcNTZ0O+n3FTUi2Z/iEKkhrX39yuZlpXoOHcdAKfdO8ZRDnu
# YipvJi9loevLS8EQGjtrroG8c6zmC/HWGDXvbNFCmvvduKVOpUUX1TkHcUfc3CHV
# jHsnui69XQYyMdbsu0tOEMY9m8DBno3/0GAXq9FrK8HLAlLkdT7eKoof7YcNLxfq
# q5J8/mwAaQUwyTfiZ4wd1AlW6c6HuuDauuX7yt7prIjH740/bQ7Y02m6c7kZRs59
# kH/+CEdcLTr5cvzi1+hQ6GQPeVOgHJYQCWtfMwevDppyzBIYl5ZHvC7CilCD1O8V
# aba4E8Y5h/fThhgF1XlHoGyt6g6QaslBiPg0QTGCA7gwggO0AgEBMIGTMIGMMQsw
# CQYDVQQGEwJJTDEWMBQGA1UEChMNU3RhcnRDb20gTHRkLjErMCkGA1UECxMiU2Vj
# dXJlIERpZ2l0YWwgQ2VydGlmaWNhdGUgU2lnbmluZzE4MDYGA1UEAxMvU3RhcnRD
# b20gQ2xhc3MgMiBQcmltYXJ5IEludGVybWVkaWF0ZSBPYmplY3QgQ0ECAgIHMAkG
# BSsOAwIaBQCgeDAYBgorBgEEAYI3AgEMMQowCKACgAChAoAAMBkGCSqGSIb3DQEJ
# AzEMBgorBgEEAYI3AgEEMBwGCisGAQQBgjcCAQsxDjAMBgorBgEEAYI3AgEWMCMG
# CSqGSIb3DQEJBDEWBBRLGOLAdKKMef492zdDnBJTBkCEZjANBgkqhkiG9w0BAQEF
# AASCAQCsBIc8wvjMRu6uqyVKrUyLN4/H2Pk6JcnyCrXUL8M7cVWFzBeWiyLIxSrX
# BuNbo2r3jCpwEq6Zej7UeiqEe9Vahc6dE1l+CB+fTg8+UeyAL0tRspb3qKmOSsLP
# P91hEbOFBU0YIORYYcZ1P1TpFuKgN+kHQQwqKxJ/YEj3rtWgzK/x3amUdu4PYVmX
# WNoQtAr+sZJlPPc5BUAWOSkAcr1WwGQcUE3sJd+vcwvAA2S1DppnPocwNUd0Cp3x
# ZzEEG1uPHJM6A89JFaMzRlrdTYrtzUnxgoZYEUzxndswe6Yth8a70FOb+oejeqiJ
# OzZjicJDfIQ0P+aj56mJU9Cy+TsIoYIBfzCCAXsGCSqGSIb3DQEJBjGCAWwwggFo
# AgEBMGcwUzELMAkGA1UEBhMCVVMxFzAVBgNVBAoTDlZlcmlTaWduLCBJbmMuMSsw
# KQYDVQQDEyJWZXJpU2lnbiBUaW1lIFN0YW1waW5nIFNlcnZpY2VzIENBAhA4Jdf6
# +GGvnvSQ5ya11lrVMAkGBSsOAwIaBQCgXTAYBgkqhkiG9w0BCQMxCwYJKoZIhvcN
# AQcBMBwGCSqGSIb3DQEJBTEPFw0xMTEwMjgxOTUzMzZaMCMGCSqGSIb3DQEJBDEW
# BBREOEMhzVSRTPMdnHYmxi/HSn3bfjANBgkqhkiG9w0BAQEFAASBgEoGFlyVm+tX
# Kuf7Nbaxu89Z9qZbG/y7bs4vKIRHuhvDKTofuwbWV8i0Ej00a1Y9PtZvmdR0YXci
# nuhmY04G9XYhzoDRUPPkb2X4qEe/BkHYZ+t7poKJ/IYPBtZvoeJ/nmF5oaa1kyTV
# RTkjiju53w4oifIynGZaYFTEYVVRV/ji
# SIG # End signature block
